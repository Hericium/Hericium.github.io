[{"title":"系列教程javao2o商城之（三）mybatisgenerator及配置验证","url":"/2019/08/27/系列教程javao2o商城之（三）mybatisgenerator及配置验证/","content":">MyBatis Generator（MBG）是MyBatis MyBatis 和iBATIS的代码生成器。它将为所有版本的MyBatis以及版本2.2.0之后的iBATIS版本生成代码。它将内省数据库表（或许多表），并将生成可用于访问表的工件。这减少了设置对象和配置文件以与数据库表交互的初始麻烦。MBG寻求对简单CRUD（创建，检索，更新，删除）的大部分数据库操作产生重大影响。您仍然需要为连接查询或存储过程手动编写SQL和对象代码。\n\n## 1.mybatis generator安装使用\n\n### 1.pom.xml引入\n```\n    <plugin>\n      <groupId>org.mybatis.generator</groupId>\n      <artifactId>mybatis-generator-maven-plugin</artifactId>\n      <version>1.3.2</version>\n      <configuration>\n          <verbose>true</verbose>\n          <overwrite>true</overwrite>\n      </configuration>\n      <executions>\n          <execution>\n              <id>Generate MyBatis Artifacts</id>\n              <goals>\n                  <goal>generate</goal>\n              </goals>\n          </execution>\n      </executions>\n  </plugin>\n```\n\n### 2. 在src/main/resources下新增 generatorConfig.xml 文件\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n<generatorConfiguration>\n    <properties resource=\"jdbc.properties\"/>\n    <!-- 数据库驱动 -->\n    <classPathEntry location=\"/Users/beast/.m2/repository/mysql/mysql-connector-java/5.0.8/mysql-connector-java-5.0.8.jar\" />\n    <context id=\"DB2Tables\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <property name=\"suppressDate\" value=\"true\" />\n            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->\n            <property name=\"suppressAllComments\" value=\"true\" />\n        </commentGenerator>\n        <!--数据库链接URL，用户名、密码 -->\n        <jdbcConnection driverClass=\"${jdbc.driver}\"\n                        connectionURL=\"${jdbc.url}\" userId=\"${jdbc.username}\" password=\"${jdbc.password}\">\n        </jdbcConnection>\n        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL 和\n            NUMERIC 类型解析为java.math.BigDecimal -->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\" />\n        </javaTypeResolver>\n        <!-- 生成模型的包名和位置 -->\n        <javaModelGenerator targetPackage=\"wang.beastxw.javao2o.entity\"\n                            targetProject=\"src/main/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"true\" />\n            <!-- 从数据库返回的值被清理前后的空格 -->\n            <property name=\"trimStrings\" value=\"true\" />\n        </javaModelGenerator>\n        <!-- 生成映射文件的包名和位置XML文件 -->\n        <sqlMapGenerator targetPackage=\"resources/mapper\"\n                         targetProject=\"src/main\">\n            <property name=\"enableSubPackages\" value=\"true\" />\n        </sqlMapGenerator>\n        <!-- 生成DAO的包名和位置 -->\n        <javaClientGenerator type=\"XMLMAPPER\"\n                             targetPackage=\"wang.beastxw.javao2o.dao\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"true\" />\n        </javaClientGenerator>\n        <!-- 要生成哪些表 -->\n        <!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 -->\n        <!--tb_area数据库表明-->                  <!--别名Book_Info  pojo（实体类明）-->\n        <!-- 配置数据库中的表(%表示所有表)，不生成Example类 -->\n        <table tableName=\"tb_area\"\n               domainObjectName=\"Area\"\n               enableCountByExample=\"false\"\n               enableUpdateByExample=\"false\"\n               enableDeleteByExample=\"false\"\n               enableSelectByExample=\"false\"\n               selectByExampleQueryId=\"false\"></table>\n    </context>\n</generatorConfiguration>\n```\n`其中classPathEntry的值是数据库驱动的地址对应maven里面的jar包，不过这里因为mysql驱动的问题(否则会一直提示找不到主键)，要降版本，上一节mysql-connector-java的版本是8.多的，把它在maven中降成现在这个。并且把jdbc.properties 这个文件换jdbc.driver的值换成jdbc.driver=com.mysql.jdbc.Driver`\n### 3.使用\n#### 1.添加maven配置\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190827152049.png)\n#### 2.输入 mybatis-generator:generate -e\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190827152111.png)\n\n## 2.验证配置\n### 1.创建地区表\n```\nCREATE TABLE `tb_area` (\n  `area_id` int(2) NOT NULL AUTO_INCREMENT,\n  `area_name` varchar(200) NOT NULL,\n  `priority` int(2) NOT NULL DEFAULT '0',\n  `create_time` datetime DEFAULT NULL,\n  `last_edit_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`area_id`),\n  UNIQUE KEY `UK_AREA` (`area_name`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n### 2.点击之前配置的maven\n### 3.你会发现mybatis generator 会自动生成 entity dao map 文件，是不是爽的飞起，不用自己写maper.xml了\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190827154529.png)\n### 4.测试一个返回列表（因为mybatis generator不会自动生成查询所有数据的mybatis，所以自己写一个）\n#### 1.在dao层的AreaMapper里面添加 `queryAreaList`这个方法\n```\npackage wang.beastxw.javao2o.dao;\n\nimport wang.beastxw.javao2o.entity.Area;\n\nimport java.util.List;\n\npublic interface AreaMapper {\n    List<Area> queryAreaList();\n\n    int deleteByPrimaryKey(Integer areaId);\n\n    int insert(Area record);\n\n    int insertSelective(Area record);\n\n    Area selectByPrimaryKey(Integer areaId);\n\n    int updateByPrimaryKeySelective(Area record);\n\n    int updateByPrimaryKey(Area record);\n}\n```\n#### 2.在mapper的AreaMapper.xml下添加\n```\n<select id=\"queryAreaList\" resultType=\"wang.beastxw.javao2o.entity.Area\">\n    SELECT\n    <include refid=\"Base_Column_List\" />\n    From tb_area\n    ORDER BY priority\n    DESC\n  </select>\n```\n\n### 5.写测试类\n#### 1.新建文件如下\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190827182000.png)\n\n#### 2.BaseTest\n\n```\npackage wang.beastxw.javao2o;\n\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * 配置spring 和 junit 整合 ， junit 启动时加载springIOC 容器\n */\n\n@RunWith(SpringJUnit4ClassRunner.class)\n// 告诉 junit spring 配置文件在哪里\n@ContextConfiguration({\"classpath:spring/spring-dao.xml\",\"classpath:spring/spring-service.xml\"})\npublic class BaseTest {\n\n}\n```\n#### 3.AreaDaoTest\n\n`先在数据库里tb_area这个表里增加一点数据`\n```\npackage wang.beastxw.javao2o.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport wang.beastxw.javao2o.BaseTest;\nimport wang.beastxw.javao2o.entity.Area;\n\nimport java.util.List;\n\npublic class AreaDaoTest extends BaseTest {\n    @Autowired\n    AreaMapper areaMapper;\n\n    @Test\n    public void TestQueryAreaList() {\n        List<Area> areaList = areaMapper.queryAreaList();\n    }\n}\n```\n#### 4.点击debug 看数据是不是和数据库里一致\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190827182615.png)\n\n\n## 3.源码\nuri: https://github.com/Hericium/javao2o\n分支: feature/startmvc\n\n## 4.添加群聊一起学习(698615299)！\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190823103757.png)","tags":["Java主流技术栈SSM+SpringBoot商铺系统"]},{"title":"系列教程javao2o商城之（二）项目配置","url":"/2019/08/23/系列教程javao2o商城之（二）项目配置/","content":"\n> 本系列为自己学习《Java主流技术栈SSM+SpringBoot商铺系统》这个课程的一个记录和分享。\n## 1.为什么学习java\n  现在是前端，一直想成为全栈，学过node和python之类的后台语言，也写过一些小项目 egg Django之类的框架也都可以使用，但是发现不能系统的入门，也加上感觉自己写的代码不是特别好，不能很好的使用面向对象语言的特性，所以就来学习java。同时对下一步上typescript有帮助。\n\n## 2.计划(同一个项目不同的语言去完成)\n\n  1.打算做三版不同语言的后台:java、 node、 python\n  2.如果有需要做4款不同框架的前台:vue、react、react-native、angular\n\n## 3.项目配置\n### 1.补全文件夹\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190823143050.png)\n\n### 2.剩余各项配置\n#### 1.创建jdbc.properties\n```\n//目录 src/main/resources/jdbc.properties\n\njdbc.driver=com.mysql.cj.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/javao2o?userUnicode=true&characterEncoding=utf8\njdbc.username=root\njdbc.password=pp123456\n\n```\n#### 2.创建mybatis-config.xml\n```\n// src/main/resources/mybatis-config.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!-- 配置全局属性 -->\n    <settings>\n        <!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 -->\n        <setting name=\"useGeneratedKeys\" value=\"true\" />\n\n        <!-- 使用列标签替换列别名 默认:true -->\n        <setting name=\"useColumnLabel\" value=\"true\" />\n\n        <!-- 开启驼峰命名转换:Table{create_time} -> Entity{createTime} -->\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\" />\n    </settings>\n</configuration>\n```\n#### 3.创建spring-dao.xml\n\n```\n//src/main/resources/spring/spring-dao.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!--配置整合mybatis过程-->\n    <!--1:配置数据库相关参数-->\n    <context:property-placeholder location=\"classpath:jdbc.properties\"/>\n    <!--2.数据库连接池-->\n    <bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\n\n        <!--配置连接池属性-->\n        <property name=\"driverClass\" value=\"${jdbc.driver}\"/>\n        <property name=\"jdbcUrl\" value=\"${jdbc.url}\"/>\n        <property name=\"user\" value=\"${jdbc.username}\"/>\n        <property name=\"password\" value=\"${jdbc.password}\"/>\n\n        <!--c3p0连接池的私有属性-->\n        <property name=\"maxPoolSize\" value=\"30\"/>\n        <property name=\"minPoolSize\" value=\"10\"/>\n        <!--关闭连接不自动commit-->\n        <property name=\"autoCommitOnClose\" value=\"false\"/>\n        <!--获取连接超时时间-->\n        <property name=\"checkoutTimeout\" value=\"3000\"/>\n        <!--当获取链接失败重试次数-->\n        <property name=\"acquireRetryAttempts\" value=\"2\"/>\n    </bean>\n    <!--3.配置SqlSessionFactory对象-->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!--注入数据库连接池-->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!--配置mybatis全局配置文件-->\n        <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\n        <!--扫描entity包 使用别名 可以简化书写 多个包时用;隔开-->\n        <property name=\"typeAliasesPackage\" value=\"wang.beastxw.javao2o.entity\"/>\n        <!--扫描sql配置文件:mapper需要的xml文件-->\n        <property name=\"mapperLocations\" value=\"classpath:mapper/*.xml\"/>\n    </bean>\n    <!--4.配置扫描Dao接口包，动态实现dao接口，注入到spring容器中-->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <!--注入sqlSessionFactory-->\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n        <!--给出需要扫描dao接口包-->\n        <property name=\"basePackage\" value=\"wang.beastxw.javao2o.dao\"/>\n    </bean>\n</beans>\n```\n\n####  4.创建spring-service.xml\n```\n// src/main/resources/spring/spring-service.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\n    http://www.springframework.org/schema/tx\n    http://www.springframework.org/schema/tx/spring-tx.xsd\">\n    <!-- 扫描service包下所有使用注解的类型 -->\n    <context:component-scan base-package=\"wang.beastxw.javao2o.service\" />\n\n    <!-- 配置事务管理器 -->\n    <bean id=\"transactionManager\"\n          class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <!-- 注入数据库连接池 -->\n        <property name=\"dataSource\" ref=\"dataSource\" />\n    </bean>\n\n    <!-- 配置基于注解的声明式事务 -->\n    <tx:annotation-driven transaction-manager=\"transactionManager\" />\n</beans>\n```\n#### 5.创建spring-web.xml\n\n```\n// src/main/resources/spring/spring-web.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context.xsd\n    http://www.springframework.org/schema/mvc\n    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd\">\n    <!-- 配置SpringMVC -->\n    <!-- 1.开启SpringMVC注解模式 -->\n    <mvc:annotation-driven />\n\n    <!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用\"/\"做整体映射 -->\n    <mvc:resources mapping=\"/resources/**\" location=\"/resources/\" />\n    <mvc:default-servlet-handler />\n\n    <!-- 3.定义视图解析器 -->\n    <!-- 不用jsp，通过结果返回数据，所以是.html -->\n    <bean id=\"viewResolver\"\n          class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"/WEB-INF/html/\"></property>\n        <property name=\"suffix\" value=\".html\"></property>\n    </bean>\n  \n    <!-- 4.扫描web相关的bean -->\n    <context:component-scan base-package=\"wang.beastxw.javao2o.web\" />\n</beans>\n```\n#### 6.修改web.xml\n```\n// 修改web.xml\n\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\" metadata-complete=\"true\">\n  <display-name>Archetype Created Web Application</display-name>\n    <!--默认访问的文件-->\n    <welcome-file-list>\n        <welcome-file>index.jsp</welcome-file>\n    </welcome-file-list>\n    <!--把之前spring文件连接起来-->\n    <!--一个servlet对应一个mapper-->\n    <servlet>\n        <servlet-name>spring-dispatcher</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:spring/spring-*.xml</param-value>\n        </init-param>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>spring-dispatcher</servlet-name>\n        <!--默认匹配所有路由-->\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n\n```\n\n## 4.源码\nuri: https://github.com/Hericium/javao2o\n分支: feature/startmvc\n\n## 5.添加群聊一起学习(698615299)！\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190823103757.png)","tags":["Java主流技术栈SSM+SpringBoot商铺系统"]},{"title":"系列教程javao2o商城之（一）搭建springmvc环境","url":"/2019/08/22/系列教程javao2o商城之（一）搭建springmvc环境/","content":"\n> 本系列为自己学习《Java主流技术栈SSM+SpringBoot商铺系统》这个课程的一个记录和分享。\n## 1.为什么学习java\n  现在是前端，一直想成为全栈，学过node和python之类的后台语言，也写过一些小项目 egg Django之类的框架也都可以使用，但是发现不能系统的入门，也加上感觉自己写的代码不是特别好，不能很好的使用面向对象语言的特性，所以就来学习java。同时对下一步上typescript有帮助。\n\n## 2.计划(同一个项目不同的语言去完成)\n\n  1.打算做三版不同语言的后台: java、 node、 python\n  2.如果有需要做4款不同框架的前台: vue、react、 react-native、 angular \n\n## 3.搭建springmvc环境\n\n### 1.新建mvn项目\n1.打开idea\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133412.png)\n2.新建项目\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133430.png)\n3.填写groupId 和 artifactId\n\n`groupid和artifactId被统称为“坐标”是为了保证项目唯一性而提出的，如果你要把你项目打包到maven本地仓库去，你想要找到你的项目就必须根据这两个id去查找。\ngroupId一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。域又分为org、com、cn等等许多，其中org为非营利组织，com为商业组织。举个apache公司的tomcat项目例子：这个项目的groupId是org.apache，它的域是org（因为tomcat是非营利项目），公司名称是apache，artigactId是tomcat。比如我创建一个项目，我一般会将groupId设置为cn.myxxx，cn表示域为中国，snowin是我个人姓名缩写，artifactId设置为testProj，表示你这个项目的名称是testProj，依照这个设置，你的包结构最好是cn.myxxx.testProj打头的。因为我的域名是beastxw.wang 所以我填写的就是下面的内容。`\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133538.png)\n4.配置mvn,因为我的是用brew装的Maven,就直接用maven的全局配置了，默认的那个settings.xml是非全局的,所以我这里重写了它。关于maven的配置网上很多，这里暂时不重复了。\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133615.png)\n5.点击完成，mvn项目就创建好了\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133643.png)\n6.应用自动导入mvn包\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133803.png)\n\n### 2.引入springmvc框架\n1.导入框架\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822133906.png)\n2.勾选导入的框架\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822134030.png)\n3.导入好之后，你会看到WEB-INF下面会多出两个文件\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822140636.png)\n4.补全项目目录,在src项目下新建这几个文件夹\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822173711.png)\n5.修改文件夹属性,上面的图就是修改过的图\n  1. java -> Sources Root\n  2. resources -> Resources Root\n  3. test/java -> Test Sources Root\n  4. test/resources -> Test Resources Root\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822154931.png)\n6.SpringMVC进行设置，首先配置web.xml,自动生成的版本是2.3的，版本太低了，换成更加高的版本,\n`welcome-file-list` 标签是指默认访问的文件\n\n```\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\" metadata-complete=\"true\">\n  <display-name>Archetype Created Web Application</display-name>\n    <welcome-file-list>\n        <welcome-file>index.jsp</welcome-file>\n    </welcome-file-list>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/applicationContext.xml</param-value>\n    </context-param>\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>*.form</url-pattern>\n    </servlet-mapping>\n</web-app>\n\n```\n\n7.pom.xml 文件配置\nmaven项目通过xxx.xml文件管理jar包\n```\n// 为下面spring.version统一赋值\n<properties>\n   <spring.version>5.1.8.RELEASE</spring.version>\n</properties>\n```\n```\n// 需要的第三方jar包\n\n <dependencies>\n        <!--单元测试-->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <!--日志-->\n        <!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <!-- Spring -->\n        <!-- 1)包含Spring 框架基本的核心工具类。Spring 其它组件要都要使用到这个包里的类，是其它组件的基本核心 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 2)这个jar 文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean 以及进行Inversion of Control\n            / Dependency Injection（IoC/DI）操作相关的所有类。如果应用只需基本的IoC/DI 支持，引入spring-core.jar\n            及spring-beans.jar 文件就可以了。 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 3)这个jar 文件为Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI\n            所需的全部类，instrumentation组件以及校验Validation 方面的相关类。 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 4) 这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 5) 为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-tx</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 6)Spring web 包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 7)包含SpringMVC框架相关的所有类。 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n        <!-- 8)Spring test 对JUNIT等测试框架的简单封装 -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- Servlet web -->\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n            <version>4.0.1</version>\n        </dependency>\n        <!-- json解析 -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.9.9</version>\n        </dependency>\n        <!-- Map工具类 对标准java Collection的扩展 spring-core.jar需commons-collections.jar -->\n        <dependency>\n            <groupId>commons-collections</groupId>\n            <artifactId>commons-collections</artifactId>\n            <version>3.2.2</version>\n        </dependency>\n        <!-- DAO: MyBatis -->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>2.0.1</version>\n        </dependency>\n        <!-- 数据库 -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.16</version>\n        </dependency>\n        <!--连接池-->\n        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->\n        <dependency>\n            <groupId>com.mchange</groupId>\n            <artifactId>c3p0</artifactId>\n            <version>0.9.5.4</version>\n        </dependency>\n  </dependencies>\n```\n\n8.点击右上角小锤子旁边的 `Add Configuration`\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822181007.png)\n9.添加tomcat服务器\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822181044.png)\n10.把右下键的那个fix修掉\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822181122.png)\n11.点击启动服务器\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190822181158.png)\n12.启动的服务器\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190823101733.png)\n\n## 4.源码\n\nuri: https://github.com/Hericium/javao2o\n分支: feature/startmvc\n\n## 5.添加群聊一起学习(698615299)！\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190823103757.png)","tags":["Java主流技术栈SSM+SpringBoot商铺系统"]},{"title":"Hexo博客谷歌收录地址","url":"/2019/08/21/Hexo博客谷歌收录地址/","content":"\n> 博客写出来重要的一环就是分享，让他人浏览，所以被浏览器收入显得至关重要！\n\n## 一.产生sitemap\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎。sitemap是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。\n\n### 1.首先安装插件：\n```\n$ npm install hexo-generator-sitemap --save\n$ npm install hexo-generator-baidu-sitemap –-save\n```\n\n### 2.编辑博客配置文件_config.yml\n\n```\n# 自动生成sitemap\nsitemap:\n  path: sitemap.xml\n```\n保存文件，重新部署博客，查看：duansm.top/sitemap.xml。显示如下信息表示sitemap生成成功。\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140945.jpg)\n\n## 二.google收录\n\n### 1.打开地址 \n[Google Search Console](https://www.google.com/webmasters/#?modal_active=none)\n\n### 2.填写地址，如果是要一级域名，写第一个；如果是要二级域名，就填第二个\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140943.jpg)\n\n### 3.验证，到域名备案商去验证\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140938.jpg)\n\n### 4.添加 sitemap.xml战点地址\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140942.jpg)\n\n### 5.效果\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140944.jpg)\n","tags":["SEO"]},{"title":"django富文本编辑器","url":"/2019/04/10/django富文本编辑器/","content":"\n> 最近一段时间都在学django,现在的网站基本都要使用到富文本编辑器，今天就记录下使用django的管理后台的一个富文本编辑器的第三方库 `DjangoUeditor`\n\n## 使用方法\n\n### 1.安装\n\n方法一：将github整个源码包下载回家，在命令行运行：\n\n    python setup.py install\n\n 方法二：使用pip工具在命令行运行(推荐)：\n\n    pip install DjangoUeditor\n\n### 2.在 settings.py的INSTALL_APPS里面增加DjangoUeditor app\n\n    INSTALLED_APPS = [\n        ...\n        'DjangoUeditor'\n    ]\n\n### 3.配置urls 在urls.py 里添加路由\n\n    # 富文本\n    path('ueditor/', include('DjangoUeditor.urls')),\n\n### 4.在 modal 使用\n    \n    # 引入 UEditorField\n    from DjangoUeditor.models import UEditorField\n    # 使用\n    class Demo(model.Model):\n       detail = UEditorField(verbose_name=u'详情', width=600, height=300, imagePath=\"courses/ueditor/\", filePath=\"courses/ueditor/\", default='')\n\n### 5.在template里的HTML 文件里面，把这个字段渲染出来    \n\n    {% autoescape off %}\n    {{ course.detail }}\n    {% endautoescape %}\n\n### 6.在 xadmin 中使用\n\n    #在该模块的 xadmin.py 中加上\n    style_fields = {\"detail\": \"ueditor\"}\n\n## 问题    \n\n### 我是在虚拟环境里起的项目，这样安装好之后，报了一个\n\n    TypeError: render() got an unexpected keyword argument 'renderer'\n\n### 解决 \n\n需要修改虚拟环境下的：boundfield.py文件： .virtualenvs/虚拟环境文件/lib/python3.X/site-packages/django/forms/boundfield.py\n\n\n   \n    89        return widget.render(\n    90            name=self.html_initial_name if only_initial else self.html_name,\n    91            value=self.value(),\n    92            attrs=attrs,\n    93           # renderer=self.form.renderer,（93行处注 释掉，就能正常运行了）\n    94        )\n \n\n## 示例\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140939.jpg)\n\n## blog: http://blog.beastxw.wang","tags":["python"]},{"title":"前端负责人不得不考虑的前端构","url":"/2019/03/16/前端负责人不得不考虑的前端构架/","content":"\n> 现在前端，都往大前端方向发展，pc, wapApp, 小程序，混合开发，桌面开发，node 后台。不光发展方向多，同一个方向的技术选型也同样多，比如wapApp的 vue,react,angular。那么问题来了，在项目中，我们到底应该如何展开我们的技术选型呢，我就结合我的经历讲一讲。\n\n# 所在项目组的技术原型\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821140941.jpg)\n \n ## 为什么会有这个选型\n\n  ### 1.pc\n\n   pc端我们要做推广，我当时考虑单页应用SEO不好做，而且页面几乎没有数据交互，`不要为了单页应用而单页应用`, 但是考虑到静态应用代码不能复用，就想到用 node模板引擎直接渲染。 访问速度应该还快一点(没做考究).\n\n  ### 2.h5\n     \n   h5, 我们已经有两个h5的项目，一个 vue ,一个 react。 但是最终还是选择 vue ,react 的包比较大，不利于前端快速加载，vue 相比于 react(dva 那一套) 的出活率高。而且国内vue确实火，小程序和混合开发相对应的解决方案都有，那么，就是他了。\n\n  ### 3.小程序\n\n  小程序之前用原生的写过一个，用原生写不利于维护，感觉有点乱，就在两个 `star 数高的、大公司维护`的里面选 wepy 和 mpvue,mpvue 能生成对应的 wapAPP,并且合适 vue 的技术栈.在合适不过了。\n\n  ### 4.混合开发\n\n  我们项目组是有安卓和ios的，但是有些内容ios 审核麻烦，所以要热更新。现在阶段，性能比较好的混合开发，就是 weex、 rn、 flutter。\n  1.weex: 阿里巴巴使用再生产环境的，国内比较友好，基于 vue ，性能可以，可以热更\n  2.rn: 脸书出品，近一年热度下降，基于 react, 性能可以，可以热更\n  3.flutter： 谷歌开源，基于 dart.js,因为实现方式，性能和体验应该比前两者好，不能热更，因为使用 dart.js 学习成本大\n  最终： flutter 不能热更 pass(解决不了最重要的需求)； rn: 相对来说还是倾向于选择国内的技术，文档好理解，和统一客户端的技术栈(vue) pass。`(经过事实践，最终还是选择了react-native,react-native 生态比weex好挺多，方案也更加成熟，开发体验比weex好的多，比如weex不能加载本地图片，react-native是允许的。) `\n\n  ### 5.node 框架\n\n  本人喜欢企业级的框架，特别是公司项目中，约定优于配置，降低维护成本，选择阿里 egg\n\n  ### 6.管理后台\n\n  管理后台数据太多了，目前应该有100多个接口，vue 维护是个问题，而且阿里 ant design pro 很好用，就它了。\n\n  ## 总结：\n\n  1.技术都是服务产品的，应该通过产品需求去选择技术\n  2.选择技术、要考虑社区活跃度，维护团队、文档、招聘相关人员是否容易等\n  3.尽量用少的技术栈去实现多的业务，降低人工成本\n\n\n\n "},{"title":"创建一个django项目","url":"/2019/03/07/创建一个django项目/","content":"\n> 记录创建一个django项目的注意点\n\n# 1.创建项目 \n\n1.在Pycharm里面新建一个django项目,并且选择环境\n或者\n```\ndjango-admin startproject project\n```\n\n2.安装django\n\n\n```  \n  pip install django  \n  pip install django==1.11 #指定版本\n```\n\n3.新建一个项目\n\n```\ndjango-admin startapp project \n```\n\n4.在生成的project同级创建templates,用来放置HTML模板,配置\n```\n# 本块代码位于：settings.py\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR,'templates')\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```\n5.修改中文语言和时区\n```\n# 本块代码位于：settings.py\n\nLANGUAGE_CODE = 'zh-hans'\n\nTIME_ZONE = 'Asia/Shanghai'\n```\n6.设置静态文件路径,static文件夹，用于放置静态文件\n\n```\n# 本块代码位于：settings.py\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR,\"static\"),\n)\n\n```\n\n7.设置媒体文件路径\n```\n# 本块代码位于：settings.py\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR,'media')\n\n```\n\n8.启动项目\n ```\n  python manage.py runserver\n ```\n\n9.应用数据模型\n\n```\n# 本块代码位于：settings.py\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME':'xxx',\n        'USER':'xxx',\n        'PASSWORD':'xxx',\n        'HOST':'127.0.0.1',\n        'PORT':'3306'\n    }\n}\n\n```\n\n10.安装 mysql\n\n```\n pip install MySQL-python\n```\n\n11.创建数据库, 迁移数据库\n  ```\n# 本块代码位于：videolearn\\videolearn\\settings.py\n# 添加app\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'project'\n]\n\n# bash\n$ python manage.py makemigrations \n$ python manage.py migrate\n \n  ```\n\n12.django命令\n\n```\npython manage.py -h :查看命令;\n例如：\nchangepassword：用于更改用户密码；\ncreatesuperuser：用于创建超级用户，后台管理员；\ndbshell：用于进入 Django 模型 shell 中；\nloaddata：用于从文件中加载数据；\nmigrate：用于检测数据模型的改变；\nmakemigtations：用于创建数据模型改变的迁移；\nstartapp：用于创建一个 Django 应用；\nstartproject：用于创建一个 Django 项目；\ncollectstatic：用于收集汇总静态文件；\nrunserver：运行自带调试服务器，默认运行在本地 8000 端口之上\n```\n","tags":["python"]},{"title":"MAC安装virtualenv和virtualenvwrapper","url":"/2019/03/05/MAC安装virtualenv和virtualenvwrapper/","content":"> 最近在学python,肯定要学安装python环境，virtualenv是用于用于创建相互独立的python虚拟环境。virtualenvwrapper则是对virtualenv提供了简易的命令行封装。\n\n\n## 1.首先安装virtualenv和virtualenvwrapper\n\n```\n  pip install virtualenv\n  pip install virtualenvwrapper\n```\n\n## 2. 查找virtualenvwrapper.sh的位置\n\n```\n  whereis virtualenvwrapper.sh\n  // 输出结果 /usr/local/bin/virtualenvwrapper.sh\n```\n\n## 3.把它添加到环境变量中\n\n```\n  1.vi ~/.zshrc // 我用的是zsh\n  2.source  /usr/local/bin/virtualenvwrapper.sh\n  3.source ~/.zshrc  // 使配置文件生效 \n```\n<!-- more -->\n\n## 4. 使用\n\n```\n  1.mkvirtualenv product --python=python3.7 // 创建\n  2.workon                // 显示所有的环境名称\n  3.workon product        // 进入环境\n  4.deactivate            // 推出环境\n  5.rmvirtualenv          // 移出环境\n  6.lsvirtualenv          // 查看所有环境\n```\n\n","tags":["python"]},{"title":"搭建gitbook和访问认证","url":"/2019/02/18/搭建gitbook和访问认证/","content":"\n> 相信大家都或多或少的都接触过gitbook。gitbook 首先是一个软件，正如上面定义的那样，它使用 Git 和 Markdown 来编排书本，如果用户没有听过 Git 和 Markdown，那么 gitbook 可能不适合你。废话不多说，干起来。\n\n## 1 gitbook安装\n\n1.1 安装npm包\n```\n  $ npm install gitbook -g\n```\n\n1.2 初始化项目\n```\n  $ mkdir gitbook 新建目录\n  $ cd gitbook\n  $ gitbook init\n  \n  目录\n  gitbook/\n  ├── README.md\n  └── SUMMARY.md\n```\n1.3 起服务\n\n```\n  $ gitbook serve\n```\n\n1.4 打开浏览器 \n\n   可以用浏览器打开 http://127.0.0.1:4000\n   \n1.5 生产文件   \n```\n  $ gitbook build\n```\n\n\n## 2 登录权限认证\n\n> 搭建就完成了，但是有一下内部文档，不想公布出去，怎么办，这个网上没有答案,但是方法总是有的,那就是nginx\n\n2.1 用到nginx认证模块\n```\nserver {\n   listen 80;\n   server_name www.host.com ;             # 域名注意不要加协议\n   location / {\n   root  html/blog;                        #根  静态文件目录\n   index index.html index.htm;\n   auth_basic     \"pleas you password\";    # nginx 认证用户和密码\n   auth_basic_user_file htpasswd;          # nginx认证文件目录  可以随意指定 \n}\n```\n\n2.2 因为要用到密码，而且是加密的，所有引入httpd模块\n```\n  $ yum -y install httpd  \n  $ htpasswd -bc /applocation/nginx/conf/htpasswd qiyun 123456  #生产密码文件,如果不能写入，就创建好文件,在执行命令\n```\n2.3 重新检测 \n```\n  $ nginx -t\n```\n\n2.4 重启\n\n```\n  $ nginx -S reload\n\n```\n\n## 3 案例 \n\n  url: http://gitbook.beastxw.wang/\n\n  name: aaa\n\n  pwd: 123\n\n## 4 图片\ngitbook\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821141908.png)\n\n登录认证\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821141816.png)","tags":["node"]},{"title":"微信小程序aes加密","url":"/2019/01/23/微信小程序aes加密/","content":"\n> 之前在segmentfalut社区写得，移到自己的博客来~~\n\n一.前言\n\n  1. 什么是AES加密：高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。\n  2. AES加密的应用场景，AES加密可逆转加密，前后端公用一个秘钥来加密解密\n二.难点：\n  小程序引入第三方库\n  前后端加密解密类型相匹配\n\n三.操作：\n  1. 很多人说小程序怎么引入第三方库：\n  2. 下载文件\n    1.exports 出来,exports可以把该文件当做模块暴露出来（下次说一下exports、exports defult、model exports的区别）\n    2.在使用到的文件里引用它\n\n```js\n// aes.js文件\n`/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n/*\nvar CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},\nr=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k>>2]|=(e[k>>>2]>>>24-8*(k%4)&255)<<24-8*((j+k)%4);else if(65535>>2]=e[k>>>2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<\n32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e>>2]>>>24-8*(j%4)&255;e.push((k>>>4).toString(16));e.push((k&15).toString(16))}return e.join(\"\")},parse:function(a){for(var c=a.length,e=[],j=0;j>>3]|=parseInt(a.substr(j,\n2),16)<<24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j>>2]>>>24-8*(j%4)&255));return e.join(\"\")},parse:function(a){for(var c=a.length,e=[],j=0;j>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},\nq=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){\"string\"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=bk;j=u.min(4a,j);if(a){for(var q=0;q\na._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,\ne)).finalize(b)}}});var n=d.algo={};return d}(Math);\n(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r>>2]>>>24-8(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75v>>6(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join(\"\")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<\nl;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"}})();\n(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},\n_doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),\nf=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,\nm,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,\nE,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8this._nDataBytes,c=8b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/\n4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);\n(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length\nl)}})();\nCryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},\nfinalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return(\"string\"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return(\"string\"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d\nc[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,\ne,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,\nthis,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,\n1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},\ndecrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return\"string\"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4c);a.sigBytes=4b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,\nb.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();\n(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257a[k]^16843008k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009G^65537F^257z^16843008e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,\n16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;dd||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>\n8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=\nd[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();\n\nmodule.exports = {\nCryptoJS: CryptoJS\n}`\n\n```\n\n```js\n// main.js\n//引入aes\n  var fun_aes = require('../../utils/aes.js');  //引用AES源码js\n//加密加密解密\n   //十六位十六进制数作为秘钥\nvar key = fun_aes.CryptoJS.enc.Utf8.parse(\"3454345434543454\");  \n//十六位十六进制数作为秘钥偏移量\nvar iv  = fun_aes.CryptoJS.enc.Utf8.parse('6666666666666666'); \n//秘钥和偏移量后台会给前端\n//封装加密\nEncrypt: function (word) {\n    var srcs = fun_aes.CryptoJS.enc.Utf8.parse(word);\n    var encrypted = fun_aes.CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: fun_aes.CryptoJS.mode.CBC, padding: fun_aes.CryptoJS.pad.Pkcs7 });\n    return encrypted.ciphertext.toString().toUpperCase();\n},\n//封装解密\nDecrypt: function (word) {\n    var encryptedHexStr = fun_aes.CryptoJS.enc.Hex.parse(word);\n    var srcs = fun_aes.CryptoJS.enc.Base64.stringify(encryptedHexStr);\n    var decrypt = fun_aes.CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: fun_aes.CryptoJS.mode.CBC, padding: fun_aes.CryptoJS.pad.Pkcs7 });\n    var decryptedStr = decrypt.toString(fun_aes.CryptoJS.enc.Utf8);\n    return decryptedStr.toString();\n}\n//使用\n//把加密好的给后台就好了，解密前端可以自己校验自己解密好的是不是和原始数据一样；\n\n```\n\n四 . demo （有aes、base64、md5、sha1的加密）\n\n Github地址： <https://github.com/Hericium/encrypt>\n\n五.最后分享一个工具，真的很有用\n\n [http://www.seacha.com/tools/aes.html\\#](http://www.seacha.com/tools/aes.html#)\n\n六.友情提示：\n\n 特别留意加密结果编码方式，有base64和16进制两种，前后台要统一。\n\n七.加密库（crypto.js） <https://github.com/brix/crypto-js>\n","tags":["前端"]},{"title":"微信小程序开发难点(html解析 动态二维码生成)","url":"/2019/01/23/微信小程序开发难点(html解析 动态二维码生成)/","content":"\n> 之前在segmentfalut社区写得，移到自己的博客来~~\n\n### 一.前言：\n\n最近公司要做一个小程序，之前也没接触过，但是用过Vue框架，就直接上手了，毕竟思想是很像的。\n但是微信小程序的坑还是有的，今天就讲一下思路，如果有需求可以出详细的文章。有错的地方请大家纠正。\n\n### 二. 微信限制\n\n* 说下微信的限制 \n  * 下面切换的tab不能超过5个\n  * 父页面和子页面的关系不能超过5个\n  * 上线打包后的文件不能超过2M\n  * 不允许跳转第三方链接（这个很重要，导致很多功能实现不了）\n  * 不能给按钮直接下载APP\n  * 内嵌H5只能展示，不能对其进行操作\n  * 小程序里面没有DOM\n  * 小程序不能用本地的图片做背景图\n\n### 三. 遇到的难点\n\n  * 渲染HTML\n    * ​问题：后台给我返回HTML的代码，让我在小程序里渲染\n    * 难点：小程序不支持DOM\n    * 方案：大神写的 [wxParse](https://github.com/icindy/wxParse)  可以渲染DOM节点\n  * 二维码生成\n    * 问题：要根据后台给的URL动态生成二维码\n    * 难点：小程序不支持DOM\n    * 方案：大神写的 [qrcode](https://github.com/yingye/weapp-qrcode) \n  * 微信API问题\n    * 问题：微信的下载文件的API有问题 `wx.downloadFile()` PC上可以用，移动端用不了，而且URL还要用一个域名下\n    * 方案：因为我们是要下载图，微信有一个预览图片的API，这个长按可以下载 wx.previewImage（）图片\n  * template模板的使用注意点\n    * 使用：\n      1. App.json文件里不能引入模板文件 如：page/template/teplate\n      2. 在父页面的 wxml和wxss文件引入template想对应的wxml和wxss文件\n        ```\n         // Wxml文件：\n         ​<import src=\"../tampmask/tampmask.wxml\" />\n         <template is=\"tampmask\" data=\"{{show}}”/>\n         // 注意上面结束标签的斜杠！！\n\n         // 对应的tampmask模板：\n          <template name=\"tampmask\"></template> \n          \n         // WXss文件：\n        ​ @import '../tampmask/tampmask.wxss’;\n\n         // js文件：\n         模板里的template.js是不会渲染到 template.js要写在引入模板文件上面\n        ```\n  * ​为了避免错误，引号尽量有双引号。\n  * 在子页面是可以设置全局的变量的，引入APP（）这个对象\n  * 微信是可以实现下拉刷新的功能的，微信是有下拉的API的，可以通过获取的值来显示隐藏刷新\n\n### 四.构建意见\n\n  * 如果内嵌H5 的页面比较多，不要每个页面都写一个页面，一个模块引入一个<web-view>文件，在根据传进来的值判断显示哪个，否则会很乱\n  * 样式可以引入weui库，契合微信的样式\n  * 双花括号里面不能用toFixed()等函数，要先在js里转化，再在双花括号里渲染\n  * 关于登录注册，微信可以直接获取手机号码，不用特地弄个登录注册页\n  * 判断是否登录的值可以放在全局的变量里，也可以放在localstroge里面（但是建议放在全局变量里面）。\n  * 关于模板，一个把所有模板写在同一个template文件下面，不用写多个，用不同的name来区分和引用，这样比较清晰，便于管理\n\n谢谢大家，如果有问题可以一起探讨\n","tags":["前端"]},{"title":"vue微信分享","url":"/2019/01/21/微信分享/","content":"> \b\b\b\b今天碰到了微信分享的需求，\b\b总体上来讲还是比较简单的，\b但是还是碰到了一个假想的坑(真的是假想),😇 \b\n[api地址]( https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115)\n### 1. 思路\n  - 步骤一：绑定域名\n  - 引入JS文件\n  - 通过config接口注入权限验证配置(反正微信的东西都有这一步)😛\n  - 通过ready接口处理成功验证\n  - 通过error接口处理失败验证\n\n### 2. 实现\n\n  1.绑定\b域名，在公众号后台绑定\b域名，\b\b所以最后的测试一定要是线上环境(要么用\b\b内网穿透，这样容易调试,不用每一次都发测试环境)\n\n  2.在index\b.html文件里面引入 \n    http://res.wx.qq.com/open/js/jweixin-1.4.0.js  // 注意协议\n\n  3.\b通过config接口注入权限验证配置, \b下面五个参数都是通过\b请求后台\b，\b后台返回给你的。 注意: \b当前页面的url是要\b在这个接口里给后台的，\b后台才能生成可用的签名算法, url的格式如下: url（当前网页的URL，不包含#及其后面部分)\b\b,所以要注意vue-router的模式(jsApiList\b是\b\b调用的事件，api文档附录2里面\b\b有)\n\n```\n    wx.config({\n      debug: false, // 是否开启调试模式\n      appId: appId, //appid\n      timestamp: timestamp, // 时间戳 \b\n      nonceStr: nonceStr, // 随机字符串，只有这个是驼峰🎃 \n      signature: signature, // 签名\n      jsApiList: [\n        \"onMenuShareTimeline\",\n        \"onMenuShareAppMessage\",\n        \"onMenuShareQQ\",\n        \"onMenuShareWeibo\",\n        \"onMenuShareQZone\"\n      ] // 需要使用的JS接口列表\n    });\n\n    // 判断当前客户端版本是否支持指定JS接口 ,这步可无\n    wx.checkJsApi({\n      jsApiList: [\n        \"onMenuShareTimeline\",\n        \"onMenuShareAppMessage\",\n        \"onMenuShareQQ\",\n        \"onMenuShareWeibo\",\n        \"onMenuShareQZone\"\n      ], // 需要检测的JS接口列表，所有JS接口列表见附录2,\n      success: function(res) {\n        console.log(res);\n        // 以键值对的形式返回，可用的api值true，不可用为false\n        // 如：{\"checkResult\":{\"chooseImage\":true},\"errMsg\":\"checkJsApi:ok\"}\n      }\n    });\n```\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821141728.png)\n\n```\n    // 通过ready接口处理成功验证\n    wx.ready(function() {\n      const share = {\n        title: mainTitle,   // \b分享出去的\b\btitle\n        desc: subTitle,     // 描述信息\n        imgUrl: smallIcons, // 分享的小图标\n        link: url,          // 分享的\b除去的url\n        success: function() {\n          dosometing();     // 分享成功，\b\b成功之后要做的事情\n        },\n        cancel: function() {\n          dosometing();     // 分享取消，取消之后要做的事情\n        }\n      };\n      wx.onMenuShareAppMessage(share); // 微信好友\n      wx.onMenuShareTimeline(share); // 朋友圈\n      wx.onMenuShareQQ(share); // QQ\n      wx.onMenuShareQZone(share); // QQ空间\n      wx.onMenuShareWeibo(share); // 腾讯微博\n    });\n\n    // 如果失败 , 获取\b失败信息 \n    wx.error(function(res) {\n      console.log(\"错误\", res);\n    });\n\n```\n\n### \b3.假想的\b坑\n\n![](https://pxw-my.oss-cn-hangzhou.aliyuncs.com/blog/20190821141639.png)\n\n \b我看别人的分享，点击分享\b都是\b有\b如上一个引导图的(\b以为是官网\b自带的)，\b但是我做好\b没有引导图，\b我开始\b一直\b以为哪一步出问题了，\b\b后来发现，这个图是要自己\b加的，\b点击\b分享，\b打开这个蒙层，在成功回调里面，把这个蒙层去掉。😅\n\n\b\b","tags":["前端"]},{"title":"node脚本自动生成代码 解放50%的生产力(一)","url":"/2019/01/10/node脚本-解放30-的生产力/","content":"> \b\b发现不管是写前端(vue,react,angular)还是后端(egg,thinkphp,laravel)这种mvvm和mvc的框架，\b\b封装的\b越\b深，\b\b\b写起来越繁琐，\b\b特别是\b写管理后台的时候(ant desgin pro),模块化导致\b封装了很多层(接口的url层、\bajax层、router\b、 model、\bview)\b每次\b添加\b\b都要文件一个个找，添加这么多层，而且基本上有50%以上的代码是\b重复的，一些常规的页面，除了接口和字段，别的都是一样的。直到我\b用到了angular 和 laravel，\b它们\b有命令行\b生成工具,但是\b对于已有的项目，再去搭建自己的脚手架不太合适，而且生成的代码不够全面，我就想自己也\b定制自己的生成代码的脚本\b来\b解决这个痛点,\b生成好之后基本改下字段就可以完事了\n\n## 生成接口URL层代码 \nURL层原始代码\b config.js\n\n```\nconst APIV1 = '/api/v1';\n\nmodule.exports = {\n  name: '管理后台',\n  logo: '/logo.png',\n  openPages: ['/login'],\n  apiPrefix: '/api/v1',\n  APIV1,\n  api: {\n    // 商品管理\n    classificationItem: `${APIV1}/classification`,\n    classificationBrand: `${APIV1}/brand`,\n    classificationSeries: `${APIV1}/brandseries`,\n    classificationGoods: `${APIV1}/productClassification`,\n    classificationProperty: `${APIV1}/attributeController`,\n    classificationCommodity: `${APIV1}/productController`,\n  },\n};\n```\n## \b1.思路\n  1.通过node\b 的bash交互，\b用户输入要生成的模块的名称，\n  2.在该文件下面自动加入代码(\b倒数第二个}前面),\n  如下：\n  ```\n  用户输入的模块名: `${APIV1}/用户输入的模块名`,\n  ```\n## 2.实现\n  1.在\b项目\b根目录下\b创建\b如下文件：\n\n    —cli\n      -config.text    //源文件，\b把里面的代码插入到config.js\n      -index.js       //node文件\n","tags":["node"]}]